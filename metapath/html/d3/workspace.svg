@extends("d3/base.svg")
@require(htmlbase, objects, inheritance)

@def styles():
<style><![CDATA[

.node, .edge {
/*   shape-rendering: crispEdges; */
}

.node { 
    fill:#fff;
    stroke:#000;
}

text {
    stroke:none;
    fill:#000;
}

.edge {
    stroke:#000;
    fill:none;
}

]]></style>
@end

        
@def script():
<script type="text/javascript" xlink:href="dagre.min.js"></script>
<script type="text/javascript" xlink:href="dagre-d3.min.js"></script>
<script type="text/javascript" xlink:href="file://@htmlbase/js/dagre.min.js"></script>
<script type="text/javascript" xlink:href="file://@htmlbase/js/dagre-d3.min.js"></script>
<script>

function workspace(id, nodes, edges){
// Create a new directed graph
var g = new dagre.Digraph();

// Add nodes to the graph. The first argument is the node id. The second is
// metadata about the node. In this case we're going to add labels to each of
// our nodes.
nodes.forEach(function(d) { 
    g.addNode(d.id,    { label: d.name,  width: 144, height: 100 });
})

// Add edges to the graph. The first argument is the edge id. Here we use null
// to indicate that an arbitrary edge id can be assigned automatically. The
// second argument is the source of the edge. The third argument is the target
// of the edge.
inheritance.forEach(function(d) { 
    g.addEdge(null, d.origin, d.target);
})


    idxy = getElementSize(id)
    var width_c = idxy[0],
        height_c = idxy[1];
    
    var margin = {top: 50, right: 50, bottom: 80, left: 50};
    var width = width_c - margin.left - margin.right,
        height = height_c - margin.top - margin.bottom;
        

var svg = d3.select(id)
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


var renderer = new dagreD3.Renderer();


var layout = dagreD3.layout()
                    .nodeSep(20)
                    .rankDir("LR");
renderer.layout(layout).run(g, svg); 
}
</script>

@end


@def generate():
    @#...
    <script>
        id = 'svg';

         objects = [
            @for d in objects:
                {
                'id':'@d[0]!s',
                'name':'@d[1]!s',
                },
            @endfor
            ];
            
         inheritance = [
            @for d in inheritance:
                {
                'origin':'@d[0]!s',
                'target':'@d[1]!s',
                },
            @endfor
            ];

        function _metapath_render_trigger(){
            workspace(id, objects, inheritance );
        }
        </script>


@end
